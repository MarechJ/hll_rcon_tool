services:
  # These containers are created only once regardless of the number of game servers
  # that you run inside of CRCON
  redis:
    image: ${REDIS_IMAGE}
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 15s
      timeout: 30s
      retries: 5
    volumes:
      - ./redis_data:/data
      - ./config:/usr/local/etc/redis
    networks:
      - common
  postgres:
    image: ${POSTGRES_IMAGE}
    environment:
      # If a password is not defined this container will fail to create
      POSTGRES_PASSWORD: ${HLL_DB_PASSWORD}
      POSTGRES_USER: ${HLL_DB_USER}
      POSTGRES_DB: ${HLL_DB_NAME}
      PGDATA: /data
      HLL_DB_NAME: ${HLL_DB_NAME}
      HLL_DB_USER: ${HLL_DB_USER}
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${HLL_DB_USER}", "-d", "${HLL_DB_NAME}" ]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 80s
    volumes:
      - ./db_data:/data
    networks:
      - common
  # This container is used for things that should only run once regardless of
  # the number of game servers used, for instance database migrations
  maintenance:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${BACKEND_DOCKER_REPOSITORY}:${TAGGED_VERSION}
    environment:
      HLL_MAINTENANCE_CONTAINER: true
      HLL_DB_USER: ${HLL_DB_USER}
      HLL_DB_PASSWORD: ${HLL_DB_PASSWORD}
      HLL_DB_NAME: ${HLL_DB_NAME}
      HLL_DB_HOST: ${HLL_DB_HOST}
      HLL_DB_HOST_PORT: ${HLL_DB_HOST_PORT}
      HLL_DB_URL: postgresql://${HLL_DB_USER}:${HLL_DB_PASSWORD}@${HLL_DB_HOST}:${HLL_DB_HOST_PORT}/${HLL_DB_NAME}
      HLL_REDIS_URL: redis://${HLL_REDIS_HOST}:${HLL_REDIS_HOST_PORT}/${HLL_REDIS_DB}
    command: maintenance
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "test -f /code/rconweb/maintenance-container-healthy" ]
      start_period: 30s
      interval: 15s
      timeout: 30s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/logs/
    networks:
      - common
  # This is used to handle webhooks to discord (and other services in the future)
  webhook_service:
    build:
      context: .
      dockerfile: Dockerfile-webhook-service
    image: ${WEBHOOK_SERVICE_DOCKER_REPOSITORY}:${TAGGED_VERSION}
    environment:
      LOGGING_LEVEL: "INFO"
      LOGGING_PATH: /logs/
      HLL_REDIS_HOST: ${HLL_REDIS_HOST}
      HLL_REDIS_PORT: ${HLL_REDIS_HOST_PORT}
      HLL_LOCAL_MAX_SENDS_PER_SEC: ${HLL_LOCAL_MAX_SENDS_PER_SEC}
      HLL_WH_SERVICE_RL_TIME_WINDOW: ${HLL_WH_SERVICE_RL_TIME_WINDOW}
      HLL_WH_MAX_QUEUE_LENGTH: ${HLL_WH_MAX_QUEUE_LENGTH}
      HLL_WH_MAX_RETRIES: ${HLL_WH_MAX_RETRIES}
    # command: webhook_service
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "test -f /app/webhook-service-healthy" ]
      start_period: 30s
      interval: 15s
      timeout: 30s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/logs/
    networks:
      - common
